# -*- coding: utf-8 -*-
"""HITS-ALGO-Ass2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sCmEvZ0FX3vDDDNcv2JSh_u6rUxtTY63
"""

import networkx as nx;
import scipy as sp;
import numpy as np;
import numpy.linalg as la
from numpy.linalg import eig
import time

"""NetworkX"""

web_graph=nx.read_gpickle("web_graph.gpickle")

print(web_graph)

print(web_graph.nodes[50])

pos = {i: web_graph.nodes[i]['pos'] for i in range(len(web_graph.nodes))}
nx.draw(web_graph,pos)

def enterQuery():
    print("enter your query:")
    a=input()
    if(a=="newcastle"):
      
    return a
def computePostings(web_graph):
    postings={}
    for i in range(len(web_graph.nodes)): 
        content=web_graph.nodes[i]["page_content"].split(" ")
        for word in content:
            lower_word=word.lower()
            if lower_word not in postings:
                postings[lower_word] = [i]
            else:
                postings[lower_word].append(i)
    return postings
    #print(postings)
def getRootSet(postings,query):
    ans=set()
    curr=query.split(" ")
    for word in curr:
        if word in postings:
            for x in postings[word]:
                ans.add(x)
    #print(ans)
    return ans
def getBaseSet(A2,inp):
  ans=set()
  for x in inp:

    ans.add(x)
    a = list(web_graph.out_edges(x))
    for ele in a:
      ans.add(ele[1])
    a = list(web_graph.in_edges(x))
    for ele in a:
      ans.add(ele[0])

  return ans
def getAdj():
    A1=nx.to_numpy_matrix(web_graph)
    print(A1)
    A2=A1.tolist()
    return A2
def getSubGraph(A,l):

    subg = [[0 for i in range(len(l))] for j in range(len(l))]
    for i in range(len(l)):
        for j in range(len(l)):
            subg[i][j]=A[l[i]][l[j]]

    return subg

def getTranspose(mat):
    B = [[0 for i in range(len(mat))] for j in range(len(mat[0]))]
    
    for i in range(len(mat)):
        for j in range(len(mat[0])):
            B[j][i]=mat[i][j]
            
    return B
def matrixMultiply(A,B):
    result=[[0 for i in range(len(A))] for j in range(len(B[0]))]
    for i in range(len(A)):
        # iterating by column by B
        for j in range(len(B[0])):
            # iterating by rows of B
            for k in range(len(B)):
                result[i][j] += A[i][k] * B[k][j]
    return result
def sort_list(list1, list2):
 
    zipped_pairs = zip(list1, list2)
    z = [x for _, x in sorted(zipped_pairs)]
    z.reverse()
     
    return z
def normalizeMat(hub):
    matrix=hub
    norm = np.linalg.norm(matrix)
    matrix = matrix/norm  # normalized matrix
    return matrix
def computeEigenValue(x):
    # eVals,eVecs=sp.linalg.eig(x,left=True,right=False)
    eVals, eVecs = la.eig(x)
    order = np.absolute(eVals).argsort()[::-1] # Orders them by their eigenvalues
    eVals = eVals[order]
    eVecs = eVecs[:,order]

    return eVals,eVecs
    
def principalLeftEigenValue(eVecs):
    r = eVecs[:, 0] # Sets r to be the principal eigenvector
    return 100 * np.real(r / np.sum(r))

"""Postings"""

postings=computePostings(web_graph)
print(postings)

"""Taking input query"""

#enter the query
query=enterQuery()
#start time
start = time.time()

"""Root set"""

# get the root
root=getRootSet(postings,query)
print(root)

"""Base set"""

A=getAdj()
base=getBaseSet(A,root)
print(base)
subgr=getSubGraph(A,list(base))
subgrT=getTranspose(subgr)

"""Hub"""

#The nodes that are linked from it to other nodes
hub=matrixMultiply(subgr,subgrT)
hubN=normalizeMat(hub)
#print(hubN)
eval1,evec1=computeEigenValue(hubN)
ans1=principalLeftEigenValue(evec1)
print(ans1)

"""Authority"""

#The nodes that are linked to it from other nodes.
auth=matrixMultiply(subgrT,subgr)
authN=normalizeMat(auth)
#print(authN)
#sort_list(ans1,list(base))
eval2,evec2=computeEigenValue(authN)
ans2=principalLeftEigenValue(evec2)
print(ans2)

"""Page Rank"""

print("Hub page rank \n")
sort_list(ans1,list(base))

print("Authority page rank \n")
sort_list(ans2,list(base))

#end time
end = time.time();
print("Execution time : " , end - start , "sec")

